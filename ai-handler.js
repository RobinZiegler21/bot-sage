const dotenv = require('dotenv');
dotenv.config();

class AIHandler {
    constructor() {
        // Pour l'instant, on simule l'IA sans vraie cl√© API
        this.apiKey = process.env.OPENAI_API_KEY || 'simulation';
    }

    async analyzeMessage(userMessage) {
        console.log('üß† IA analyse:', userMessage);
        
        // Simulation intelligente de l'IA
        const response = this.simulateAI(userMessage);
        
        console.log('ü§ñ IA r√©pond:', response);
        return response;
    }

    simulateAI(message) {
        const lowerMessage = message.toLowerCase();
        
        // IMPORTANT: V√©rifier TERMIN√â en premier !
        if (lowerMessage.includes('termin√©') || lowerMessage.includes('fini') || 
            lowerMessage.includes('done') || lowerMessage.includes('complet')) {
            return {
                action: 'complete_task',
                data: { status: 'done' },
                confirmation: '‚úÖ Je vais marquer cette t√¢che comme termin√©e'
            };
        }
        
        // Puis v√©rifier cr√©ation de t√¢che
        if (lowerMessage.includes('t√¢che') || lowerMessage.includes('task') || 
            lowerMessage.includes('cr√©er') || lowerMessage.includes('ajouter')) {
            return {
                action: 'create_task',
                data: {
                    title: this.extractTaskTitle(message),
                    priority: 'normal'
                },
                confirmation: `‚úÖ Je vais cr√©er la t√¢che: "${this.extractTaskTitle(message)}"`
            };
        }
        
        // Conversation normale
        return {
            action: 'chat',
            data: {},
            confirmation: `ü§ñ J'ai bien re√ßu: "${message}"`
        };
    }

    extractTaskTitle(message) {
        // Extraction simple du titre de t√¢che
        const patterns = [
            /(?:cr√©er|ajouter|nouvelle?)\s+(?:une?\s+)?t√¢che\s+["']?([^"']+)["']?/i,
            /t√¢che\s*:\s*["']?([^"']+)["']?/i,
            /["']([^"']+)["']/,
        ];
        
        for (const pattern of patterns) {
            const match = message.match(pattern);
            if (match) return match[1].trim();
        }
        
        // Si rien trouv√©, retourner le message complet
        return message.replace(/(?:cr√©er|ajouter|nouvelle?)\s+(?:une?\s+)?t√¢che\s*/i, '').trim();
    }
}

module.exports = AIHandler;